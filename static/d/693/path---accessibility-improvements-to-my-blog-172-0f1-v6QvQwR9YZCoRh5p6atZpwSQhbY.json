{"data":{"wordpressPost":{"title":"Accessibility improvements to my blog","content":"<html><head></head><body><p>\t\t\t\tThese past few months I&#x2019;ve been super-interested in web accessibility (a11y). As I was learning more about it, I was also <a href=\"http://github.com/Tetsuro/tetchi-blog/milestones/a11y%20Improvements\">compiling a list</a> of a11y-related issues on my own blog. This weekend I spent some time to finally scratch the ol&#x2019; itch and crush a bunch of these issues. This is great news for all ten of my readers!</p>\n<p><!--more--></p>\n<h2>1. Skip to main content button</h2>\n<p>The first thing I implemented was a &#x201C;Skip to main content&#x201D; link. I followed the example on WebAim.org <a href=\"http://webaim.org/techniques/skipnav\">here</a>.</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/skip_to_content.gif\" alt=\"Skip To Content\"></p>\n<div class=\"sub\">The &#x201C;Skip to main content&#x201D; link appears when you hit tab.</div>\n<p>&#x201C;Skip to main content&#x201D; links are really handy for keyboard users, because oftentimes there is a lot of content before the main content of a page that they want to skip (ex: navigation links, logos, titles, etc.). Having this link allows users to simply hit the Tab key and skip right to the meat and potatoes.</p>\n<p>This was fairly simply to implement. What I did was put an anchor tag at the very top of the page that is positioned off-screen by default, but positions itself on-screen on <code>:focus</code>. The link, when clicked, jumps to the div that wraps the main content. For good measure, I also added a <code>tabindex=&quot;-1&quot;</code> to the main content div.</p>\n<h2>2. Better &#x201C;Read More&#x201D; links</h2>\n<p>The &#x201C;Read More&#x201D; links under each post summary were not very helpful. Screen readers would read it as &#x201C;Read more [arrow sign]&#x201D;, which is not really helpful.</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/read-more-before.png\" alt=\"read-more-before\"></p>\n<div class=\"sub\">Before: read more &#x2026; what!? The suspense!</div>\n<p>To improve this, I created a CSS class called <code>.visually-hidden</code> that positions items off-screen (using <a href=\"http://webaim.org/techniques/css/invisiblecontent/#absolutepositioning\">this</a> technique). I then inserted a <code>span</code> with this class inside the anchor tag that provided more information about the link.</p>\n<pre><code markup=\"none\">\n<a href=\"&lt;?php the_permalink() ?&gt;#more-&lt;?php the_id() ?&gt;\">\n   Read more <span class=\"visually-hidden\">about <!--?php the_title(); ?--></span><span aria-hidden=\"true\">&#x2192;</span>\n</a>\n</code>\n</pre>\n<p>This change makes no visual difference, but provides a lot more information about the &#x201C;Read more&#x201D; links for screen reader users.</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/read-more-after.png\" alt=\"read-more-after\"></p>\n<div class=\"sub\">After: read more [post title]. Much better context.</div>\n<p>Finally, I applied <code>aria-hidden=&quot;true&quot;</code> to the &#x2192; symbol, which makes it so that it is completely ignored by screen readers. This is perfect for decorative things like the arrow here that do not need to be read out by screen readers.</p>\n<h2>3. Re-organizing headings</h2>\n<p>Originally I had all the post titles on my blog as <code>h1</code>s. This was not very helpful for screen readers as everything would be listed on one level. The screenshot below of the Headings menu in Voiceover shows how the headings were all on the same level.</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/headings-before.png\" alt=\"headings-before\"></p>\n<div class=\"sub\">Headings: before. All headings were on the same level.</div>\n<p>I made all of the post titles <code>h2</code>s, and added a visually hidden title to my header with the text &#x201C;tetchi&#x2019;s blog&#x201D;. The headings menu now looked like this:</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/headings-after.png\" alt=\"headings-after\"></p>\n<div class=\"sub\">Headings: after. Better hierarchy.</div>\n<p>I think it makes sense to have the post titles hierarchically lower than the site title. This is probably more of a semantics win, but helpful for screen readers nonetheless.</p>\n<h2>4. Less annoying subtitle</h2>\n<p>One thing I noticed while testing was that words in ALL CAPS are read out character-by-character as if they are acronyms. This posed a problem for the subtitle under my navigation, which was all caps and would be read as &#x201C;T-E-T-C-H-I&#x2019;s B-L-&#x201D; &#x2026;and so on.</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/all_caps.png\" alt=\"all caps subtitle\"></p>\n<div class=\"sub\">All caps title: really annoying to listen to.</div>\n<p>To remedy this, I first applied a <code>aria-hidden=&quot;true&quot;</code> attribute to the all-caps version of the subtitle so that it is completely ignored by screen readers. Next, I added a span with the <code>.visually-hidden</code> class that I created earlier with more screen reader-friendly text.</p>\n<pre><code markup=\"none\">\n<div class=\"header__subtext\">\n  <span aria-hidden=\"true\">TETCHI&apos;S BLOG. BASS // BURGERS // BAHDS.</span>\n  <span class=\"visually-hidden\">tetchi&apos;s blog. Bass, burgers, and buds.</span>\n</div>\n</code>\n</pre>\n<p>The screenshot below shows the result &#x2013; a much less annoying reading of the subtitle.</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/all-caps-after.png\" alt=\"all-caps-after\"></p>\n<p>One takeaway from this was that screen readers will read words as all caps even if it&#x2019;s being transformed into uppercase via CSS&#x2019;s <code>text-transform: uppercase</code> property.</p>\n<h2>5. Better landmarks</h2>\n<p>The Landmarks menu in VoiceOver breaks up the page into meaningful regions, making it easier for screen reader users to navigate. As shown in the screenshot below, my blog did not have many helpful landmarks:</p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/landmarks-before.png\" alt=\"landmarks-before\"></p>\n<div class=\"sub\">Before: only two landmarks.</div>\n<p>I started off by adding a <code>role=&quot;main&quot;</code> to the main content div, which would make it so that VoiceOver picks it up as &#x201C;main&#x201D; in the Landmarks menu. This provided another way for screen reader users to go to the main content.</p>\n<p>I then tried to add the footer to the Landmarks list, but I was confused as to why my footer wasn&#x2019;t being picked up in the first place. I has assumed that if I used the HTML5 <code></code></p>\n<p><code><br>\n</code></p>\n<footer><code></code> for my footer, it would automatically be mapped to a &#x201C;footer&#x201D; landmark. Bruce Lawson explains why this is not the case in <a href=\"http://www.brucelawson.co.uk/2013/why-does-html-take-rolecontentinfo\">this excellent blog post</a>.<p></p>\n<p>Following Bruce&#x2019;s advice, I applied a <code>role=&quot;contentinfo&quot;</code> to the <code></code></p>\n<p><code><br>\n</code></p>\n<footer><code></code> so that it would be picked up by Voiceover. I then added a <code>aria-label=&quot;footer&quot;</code> to make it appear as &#x201C;footer&#x201D; in the Landmarks menu instead of the default &#x201C;Content information&#x201D; label, which I thought was a bit too generic.<p></p>\n<p><img src=\"https://www.tetchi.ca/wp-content/uploads/2016/02/landmarks-after.png\" alt=\"landmarks-after\"></p>\n<div class=\"sub\">After: additional landmarks for better navigation.</div>\n<h2>6. aria-hidden=&#x201D;true&#x201D; crusade</h2>\n<p>The last thing I did was go through my blog and pick out anything that I felt was decorative and did not need to be read out by screen readers. Some examples of this were:</p>\n<ul>\n<li>Commas between post tags</li>\n<li>Hamburger image in the header</li>\n<li>Social media icons in the footer</li>\n<li>&#x201C;/&#x201D; divider used between links in the footer</li>\n</ul>\n<h2>Conclusion</h2>\n<p>All in all I was pretty happy with the a11y improvements. I bet the number of screen reader users that visit my blog is really low or non-existent, but it&#x2019;s nice to have the site be as accessible as possible just in case!</p>\n<p>I wanted to fix up the accessibility of the comments form as well, but unfortunately ran out of time. I&#x2019;ll take care of that next weekend.</p>\n<p>If you are an a11y expert or a screen reader user and encounter a problem on my blog, I&#x2019;d love for you to make an issue <a href=\"https://github.com/Tetsuro/tetchi-blog/issues/new\">here</a>. Much appreciated!</p>\n<hr>\n<p><em>Shoutouts to <a href=\"https://twitter.com/svinkle\">Scott</a> for suggesting a lot of the a11y improvements in this post &#x2013; you da man.</em></p>\n</footer>\n</footer>\n</body></html>","wordpress_id":4508},"allWordpressWpComments":{"edges":[{"node":{"content":"<p>@Franklyn thanks so much for reading ðŸ™‚</p>\n","author_name":"tetchi","date":"March 11th, 2016"}},{"node":{"content":"<p>Really inspiring stuff. I like your use of read more and having the topic as screen reader only.</p>\n","author_name":"Franklyn","date":"March 11th, 2016"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"accessibility-improvements-to-my-blog","wordpressId":4508,"newerPostSlug":"the-leafs-finish-last-in-the-league-but-i-couldnt-be-more-excited","olderPostSlug":"a11y-tables-and-visually-hiding-columns"}}