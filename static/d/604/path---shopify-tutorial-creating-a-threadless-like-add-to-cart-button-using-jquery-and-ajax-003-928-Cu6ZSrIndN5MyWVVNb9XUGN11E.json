{"data":{"wordpressPost":{"title":"Shopify Tutorial: Creating a Threadless-like Add-to-Cart button using jQuery and AJAX","content":"<p>In this tutorial we will be modifying the product page of the Ripen theme to work more like the product page on <a href=\"http://www.threadless.com/\" target=\"_blank\">Threadless</a>. We&#8217;re going to be modifying the Ripen theme, but this tutorial is applicable to any Shopify theme. I would like to thank <a href=\"http://www.tajimaphotography.com/\" target=\"_blank\">John Tajima</a> again for teaching me how AJAX and JSON objects work with Shopify. We will also make it so that the number of products in the cart displayed automatically updates after you add an item to the cart.</p>\n<p><object width=\"588\" height=\"354\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"><param name=\"allowFullScreen\" value=\"true\" /><param name=\"allowscriptaccess\" value=\"always\" /><param name=\"src\" value=\"http://www.youtube.com/v/lurhciqVDTQ&amp;hl=en_US&amp;fs=1\" /><param name=\"allowfullscreen\" value=\"true\" /><embed width=\"588\" height=\"354\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/lurhciqVDTQ&amp;hl=en_US&amp;fs=1\" allowFullScreen=\"true\" allowscriptaccess=\"always\" allowfullscreen=\"true\" /></object></p>\n<div class=\"sub\">A quick demo of the completed theme in action</div>\n<p><!--more--></p>\n<h2 class=\"steps\">1. Install jQuery</h2>\n<p>If you are unsure of how to do this, please see Steps 1 to 3 from <a href=\"http://blog.tetsutakara.com/593/shopify-tutorial-making-sure-a-user-agrees-to-the-terms-conditions-using-jquery/\">this tutorial.</a></p>\n<h2 class=\"steps\">2. Install Colorbox</h2>\n<p>Grab the jQuery plugin Colorbox <a href=\"http://colorpowered.com/colorbox/\">here</a>, and upload it to your theme assets. We&#8217;re going to be using Colorbox to get the lightbox popup when a product is added to the cart. I usually use Fancybox for lightboxes, but I decided to go with Colorbox for this tutorial because it <em>&#8220;can be called directly, without assignment to an element&#8221;</em>. This means that I can call a Colorbox method, and create a lightbox on-the-fly when the &#8220;Add to Cart&#8221; button is clicked, but with Fancybox this would be impossible.</p>\n<p><img class=\"alignnone size-medium wp-image-1175\" title=\"thread1\" src=\"https://www.tetchi.ca/wp-content/uploads/2010/07/thread1-588x272.png\" alt=\"thread1\" width=\"588\" height=\"272\" /></p>\n<div class=\"sub\">In your theme assets, you should have &#8220;jquery.colorbox-min.js&#8221; and &#8220;colorbox.css&#8221;.</div>\n<p>Be sure to add these two files in the &lt;head&gt; section to your theme.liquid as well.</p>\n<pre><code> <span style=\"color: blue;\">...other assets</span> {{ 'colorbox.css' | asset_url | stylesheet_tag }} {{ 'jquery.colorbox-min.js' | asset_url | script_tag }} </code></pre>\n<h2 class=\"steps\">3. Modify the &#8220;Add to Cart&#8221; button</h2>\n<p>Open your product.liquid file, and locate the input button for adding to the cart. The input button looks like this:</p>\n<pre><code> <input id=\"add\" type=\"submit\" name=\"add\" value=\"Add to Cart\" /> </code></pre>\n<p>We want to do two things to this button: first, we want to make it so that even if the user clicks on it, the user is not taken to the cart page. Second, we want to call a custom function (that we&#8217;re going to be writing shortly) that makes an AJAX call to add the product to the cart.</p>\n<pre><code> <input id=\"add\" style=\"color: red;\" type=\"submit\" name=\"add\" value=\"Add to Cart\" />onclick=\"return false; addItem('add-to-cart');\"/&gt; </code></pre>\n<p>The addItem function takes the form&#8217;s id as a parameter. This is so that when we use jQuery later, we know which form to select. The opening tag for your form should look like this:</p>\n<pre><code><form id=\"add-to-cart\" action=\"/cart/add\" method=\"post\"></form>\n</code></pre>\n<h2 class=\"steps\">4. Preparing product.liquid</h2>\n<p>Add the following line at the top of product.liquid.</p>\n<pre><code> \n<div id=\"added-box-wrapper\" style=\"display: none;\">&nbsp;</div>\n</code></pre>\n<p>The added-box is where the content of the lightbox will be inserted. We need to wrap it in another div with a &#8220;display:none;&#8221; so that the content of the lightbox are not displayed on the actual page.</p>\n<h2 class=\"steps\">5. Preparing theme.liquid</h2>\n<p>Next, we have to modify theme.liquid a little so that the number displayed for the number of items in the cart updates automagically. In theme.liquid, find a place where you want to show a link to the cart. In this tutorial, I&#8217;m going to put it in the right column, under where it says &#8220;Shopping Cart&#8221;.</p>\n<pre><code markup=\"none\">\n<a id=\"cart-number\" href=\"/cart\">{% if cart.item_count == 0 %} Your cart is empty. {% endif %}</a>\n</code></pre>\n<p>What&#8217;s important here is that the &lt;a&gt; tag has the id &#8220;cart-number&#8221;, so that we can select it with jQuery later to modify its contents.</p>\n<h2 class=\"steps\">6. Displaying the number of items in the cart when the product page is loaded</h2>\n<p>In theme.liquid, locate the &lt;head&gt; section. This is where we will be adding the Javascript to make it all happen.</p>\n<p>First, we need to add create a variable called cartCount, which will store the number of items that are in the cart. When the product page is loaded, we want to query the number of items that are currently in the cart with Liquid, and then store it in a Javascript variable called &#8216;cartCount&#8217;.</p>\n<pre><code><script type=\"text/javascript\">// <![CDATA[\n  var cartCount = {{ cart.item_count }};\n\n// ]]></script></code></pre>\n<p>Next, we want to create a function that is called upon when the page is done loading. When the page is loaded, the link with the id &#8220;cart-number&#8221; that we created in the last step should display the right number of items in the cart. We can do this by adding the the following function in the script:</p>\n<pre><code markup=\"none\"><script type=\"text/javascript\">// <![CDATA[\n  var cartCount = {{ cart.item_count }};\n\n  $(document).ready(function(){   \n    {% if cart.item_count != 0 %}  \n       $('#cart-number').replaceWith(\"<a href='/cart' id='cart-number'>View cart (\" + cartCount + \")</a>\");\n    {% endif %}\n  });\n\n// ]]></script></code></pre>\n<h2 class=\"steps\">7. Make the AJAX call to add the product to the cart</h2>\n<p>Let&#8217;s now create the function for adding the product to the cart. Below the document.ready function, add the following function.</p>\n<pre><code markup=\"none\"><script type=\"text/javascript\">// <![CDATA[\n  var cartCount = {{ cart.item_count }};\n\n  $(document).ready(function(){   \n    {% if cart.item_count != 0 %}  \n    $('#cart-number').replaceWith(\"<a href='/cart' id='cart-number'>View cart (\" + cartCount + \")</a>\");\n    {% endif %}\n  });\n\n  function addItem(form_id) {\n    $.ajax({\n      type: 'POST',                             \n      url: '/cart/add.js',\n      dataType: 'json',                               \n      data: $('#'+form_id).serialize(),            \n      success: addToCartOk,                        \n      error: addToCartFail                            \n    });\n  }\n\n// ]]></script></code></pre>\n<p>The addItem function makes an AJAX request using jQuery.ajax().</p>\n<ul>\n<li>the <em>type</em> option specifies what kind of request we&#8217;re going to make. We will be making a POST request.</li>\n<li>the <em>url</em> option tells the server to add the product to the cart.</li>\n<li>the <em>dataType</em> option specifies the type of data that we want back from the server. We want to receive the data as JSON objects.</li>\n<li>the <em>data</em> options specifies what data we want to send to the server. We&#8217;re going to be selecting the form from the product page, and using the serialize() method on it to make it into a string that is readable by the server.</li>\n<li>If the AJAX call is successful, the addToCartOk function is called. If it is not, the addToCartFail function is called.</li>\n</ul>\n<h2 class=\"steps\">8. addToCartOk &#8211; the function for a successful AJAX call</h2>\n<p>Let&#8217;s start off by creating the function that is called when the product is added to the cart successfully.</p>\n<pre><code> ... data: $('#'+form_id).serialize(), success: addToCartOk, error: addToCartFail }); } function addToCartOk(product) { cartCount++; $('#added-box').html(product.title + ' was added to the cart!'); $('#cart-number').replaceWith(\"<a id=\"cart-number\" href=\"/cart\">View cart (\" + cartCount + \")</a>\"); $.fn.colorbox({ open:true, width: \"400px\", innerHeight: \"60px\", inline:true, href:\"#added-box\", transition: 'none' }); } </code></pre>\n<p>Now, the lightbox that I created isn&#8217;t the prettiest thing in the world, but you can customize the look and feel by adjusting Colorbox&#8217;s properties. You can also modify colorbox.css.</p>\n<p>To change the color of the overlay, open colorbox.css, and look for the #cboxOverlay selector and change the background to the color or image of your choice. To make my overlay black, I set #cboxoverlay to the following:</p>\n<pre><code> #cboxOverlay{background:#000;} </code></pre>\n<h2 class=\"steps\">9. addToCartFail &#8211; the function for an unsuccessful AJAX call</h2>\n<p>The last thing we want to do is to create a function that is called if the product was not able to be added to the cart. The primary reason for not being able to add something to the cart is that there is not enough inventory for that item.</p>\n<pre><code> ... $.fn.colorbox({ open:true, width: \"400px\", innerHeight: \"60px\", inline:true, href:\"#added-box\", transition: 'none' }); } function addToCartFail(obj, status) { $('#added-box').html('The product you are trying to add is out of stock.'); $.fn.colorbox({ open:true, width: \"400px\", innerHeight: \"60px\", inline:true, href:\"#added-box\", transition: 'none' }); } </code></pre>\n<p>Alternatively, you can use the code below to receive the actual message of the error. This was my initial approach, but I found that sometimes the Shopify servers won&#8217;t return the proper response, which in turn would not make the lightbox appear at all. If anybody could give me some insight on why this happens, that would be awesome.</p>\n<pre><code> ... $.fn.colorbox({ open:true, width: \"400px\", innerHeight: \"60px\", inline:true, href:\"#added-box\", transition: 'none' }); } function addToCartFail(obj, status) { try { var response = jQuery.parseJSON(obj.responseText); $('#added-box').html(response.description); } catch(e) { $('#added-box').html(\"There was an error\"); } $.fn.colorbox({ open:true, width: \"400px\", innerHeight: \"80px\", inline:true, href:\"#added-box\", transition: 'none' }); } </code></pre>\n<h2 class=\"steps\">10. Conclusion</h2>\n<p>You now have a product page that works similar to that of Threadless. I&#8217;m not too happy with the way the addToCartFail function is working right now, but for now it seems like it&#8217;s the only way to have the lightbox appear every time there is an error. You can download the completed theme <a href=\"http://localhost:8888/wp-content/uploads/2010/07/vogue-modified.zip\">here</a>.</p>\n<p>Big thanks again to <a href=\"http://www.tajimaphotography.com/\" target=\"_blank\">John Tajima</a> for his help!</p>\n","wordpress_id":1156},"allWordpressWpComments":{"edges":[{"node":{"content":"<p>@H Thanks for the feedback. Looks like there aren&#8217;t too many other resources out there for this. </p>\n<p>As soon as I&#8217;m finished with the Shopify Theme from Scratch series, I&#8217;ll do a re-write of this article with better examples.</p>\n","author_name":"tetchi"}},{"node":{"content":"<p>Also bummed that this doesn&#8217;t work anymore. This is the only tutorial I found which shows shopify users how to do something like this, which is stranger because it&#8217;s a pretty common functionality.</p>\n","author_name":"H"}},{"node":{"content":"<p>I can&#8217;t get this to work, but it&#8217;s exactly what I need! Any ideas?</p>\n","author_name":"Alicia Leo"}},{"node":{"content":"<p>@Owen ah, I wrote this tutorial 3 years ago and I&#8217;ve since updated the &#8220;Terms and Conditions&#8221; one to auto-include jQuery. When I get a chance I&#8217;ll do the same with this one.</p>\n","author_name":"tetchi"}},{"node":{"content":"<p>Just curious&#8230;. is step one linking to another tutorial the correct link?  Doesn&#8217;t seem relevant to making sure jQuery is installed.</p>\n<p>I wasn&#8217;t able to get this working yet, will try again later.  I tried a method from a different tutorial and also got a status 400 error.</p>\n","author_name":"Owen Sechrist"}},{"node":{"content":"<p>Hi,</p>\n<p>I am not sure what I am doing wrong but I keep getting a &#8220;Failed to load resource: the server responded with a status of 400 (Bad Request) &#8220;.</p>\n<p>Any advice?</p>\n","author_name":"Siegfried"}},{"node":{"content":"<p>Gah! Sorry for that Jo, it looks like I messed up the pagination in WordPress. Taking a look now&#8230;.</p>\n<p>UPDATE: I&#8217;ve fixed the pagination issue. Thanks for catching that!</p>\n","author_name":"tetchi"}},{"node":{"content":"<p>Lol &#8211; just found the rest of the post here &#8211; <a href=\"http://blog.tetsutakara.com/1156/creating-a-threadless-like-add-to-cart-button-using-jquery-and-ajax/2/\" rel=\"nofollow\">http://blog.tetsutakara.com/1156/creating-a-threadless-like-add-to-cart-button-using-jquery-and-ajax/2/</a></p>\n","author_name":"Jo"}},{"node":{"content":"<p>Hey all, just following through the tutorial and yes, pretty sure there&#8217;s been a couple of stages missed.<br />\nThe AddToCart function isn&#8217;t defined anywhere?</p>\n","author_name":"Jo"}},{"node":{"content":"<p>I couldn&#8217;t get this to work either&#8230; I&#8217;m using a heavily customized helvetica theme&#8230; I&#8217;d really like to be able to use this but just no dice&#8230;</p>\n<p>I&#8217;m not sure but would it be anything to do with the use of the javascript statement &#8216;return false;&#8217; in the onclick button? It looks like that may be stopping the calling of the addItem function?</p>\n<p>Any ideas Tets?</p>\n<p>Thanks<br />\nRick</p>\n","author_name":"Rick"}},{"node":{"content":"<p>Hi Tets,</p>\n<p>I can&#8217;t figure out what I have done. I can&#8217;t seem to click add to cart at all now. Does it work with slate theme?</p>\n<p>I am not too familiar with js but your tut looked pretty straightforward so I gave it a go. Can you take a look at my shop for me? Password is unibox11 for the storefront. Need to get it sorted pretty soon as my launch is Tuesday.</p>\n<p>J</p>\n","author_name":"Jamie"}},{"node":{"content":"<p>Hey Andrew,</p>\n<p>Hmm&#8230; I don&#8217;t think I&#8217;ve left anything out. What&#8217;s your store&#8217;s URL? Maybe I can take a look and help out.</p>\n<p>Cheers,</p>\n<p>Tets</p>\n","author_name":"Tetsuro"}},{"node":{"content":"<p>I&#8217;m having trouble getting this to work. Is there anything assumed you didn&#8217;t mention. Other scripts etc.. I&#8217;m using my own theme with this. Thanks</p>\n","author_name":"Andrew"}},{"node":{"content":"<p>Hey dude, </p>\n<p>Nice work 🙂</p>\n<p>I&#8217;ve done this same thing in mootools 1.3 (not the version that&#8217;s on the global asset area at shopify) if you&#8217;re interested in seeing the code just let me know.</p>\n<p>It makes no difference really, but I just prefer the way mootools code looks 😉</p>\n<p>darbotron</p>\n","author_name":"darbotron"}},{"node":{"content":"<p>does not work on Onyx theme.</p>\n","author_name":"Keith"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"shopify-tutorial-creating-a-threadless-like-add-to-cart-button-using-jquery-and-ajax","wordpressId":1156}}