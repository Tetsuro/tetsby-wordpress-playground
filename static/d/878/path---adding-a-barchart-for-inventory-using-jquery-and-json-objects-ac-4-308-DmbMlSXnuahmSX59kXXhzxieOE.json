{"data":{"wordpressPost":{"title":"Shopify Tutorial: Adding a Barchart for Inventory Using jQuery and JSON Objects","content":"<p>\t\t\t\tI was looking at t-shirts at an online store one day, and it had a nice little bar chart that displayed how much of each size it had left. I thought to myself, &#8220;I wonder if this is doable in Shopify?&#8221;. The answer is yes, thanks to jQuery and JSON Objects. In this tutorial, I&#8217;ll be showing you how to add a bar chart in your product page that shows how much of each variant you have left in a bar chart. A big thank you to Javascript wizard <a href=\"http://www.tajimaphotography.com\" title=\"John Tajima Photography\">John Tajima</a> for introducing me to JSON objects and helping me out with the Javascript portion of this tutorial. </p>\n<p><img src=\"http://localhost:9999/wp-content/uploads/2009/11/Screen-shot-2009-11-22-at-6.13.52-PM.jpg\" alt=\"Screen-shot-2009-11-22-at-6.13.52-PM\" title=\"Screen-shot-2009-11-22-at-6.13.52-PM\" width=\"588\" height=\"359\" class=\"alignnone size-full wp-image-719\" srcset=\"http://localhost:9999/wp-content/uploads/2009/11/Screen-shot-2009-11-22-at-6.13.52-PM.jpg 588w, http://localhost:9999/wp-content/uploads/2009/11/Screen-shot-2009-11-22-at-6.13.52-PM-300x183.jpg 300w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></p>\n<div class=\"sub\">The bar chart integrated into the <em>Moderno</em> theme.</div>\n<p>Implementing this feature can be done in three easy steps: adding the HTML/Liquid, adding the Javascript, and then adding the CSS. You can also fully customize the look of the bar chart with CSS. This bar chart will work for <em>any</em> theme, as long as you insert the HTML, Liquid, Javascript and CSS properly.<br />\n<!--more--><br />\nKeep in mind that this code will only work if you&#8217;re tracking the inventory levels of your product&#8217;s variant. In order to enable inventory tracking, you must navigate to your Product details page, and scroll down to where it lists the variants. Click the &#8216;edit&#8217; link next to the variants, and in the dropdown menu, select &#8220;Shopify tracks this variant&#8217;s stock level&#8221;. Finally, enter the inventory level for this variant.</p>\n<p><img src=\"http://localhost:9999/wp-content/uploads/2009/11/Screen-shot-2009-12-10-at-12.09.34-AM.png\" alt=\"Screen shot 2009-12-10 at 12.09.34 AM\" title=\"Screen shot 2009-12-10 at 12.09.34 AM\" width=\"588\" height=\"339\" class=\"alignnone size-full wp-image-898\" srcset=\"http://localhost:9999/wp-content/uploads/2009/11/Screen-shot-2009-12-10-at-12.09.34-AM.png 588w, http://localhost:9999/wp-content/uploads/2009/11/Screen-shot-2009-12-10-at-12.09.34-AM-300x173.png 300w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></p>\n<h2 class=\"steps\">The way it works:</h2>\n<p>The algorithm is best explained with an example. You have a t-shirt with 3 variants: small, medium, large. Let&#8217;s say you have 2 smalls, 4 mediums, and 4 larges. </p>\n<p>The Javascript code will first calculate the total inventory level for ALL variants &#8211; in this example, the total will be 10 (2 smalls + 4 mediums + 4 larges = 10). Then, for each variant, it will calculate the percentage of a single variant&#8217;s inventory level versus. the total inventory level. This percentage is then used to determine the width of each bar. The percentages in our t-shirt example would be 20% for small, 40% for medium, and 40% for large, and the CSS will fill in the black bars accordingly. </p>\n<h2 class=\"steps\">1. Download jQuery and put it in the theme.</h2>\n<p>If you are unsure of how to do this, please see Steps 1 to 3 from my <a href=\"http://blog.tetsutakara.com/593/shopify-tutorial-making-sure-a-user-agrees-to-the-terms-conditions-using-jquery/\">last tutorial.</a></p>\n<h2 class=\"steps\">2. Insert the HTML/Liquid code inside of Product.liquid.</h2>\n<p>This is the code that is used to display the bar chart. Paste this code inside product.liquid where you want to output the bar chart. </p>\n<pre>\n<code>\n{% if product.variants.size > 1 %}\n  <div id=\"inventory\">\n    {% for variant in product.variants %}\n      <div class=\"inventory-item\">\n        <span>{{ variant.title }}</span><br/>\n        <div class=\"inventory-bar\">\n          <div class=\"filler variant_{{forloop.index0}}\">&nbsp;</div>\n        </div>\n      </div>\n    {% endfor %}\n  </div>\n{% endif %}\n</code>\n</pre>\n<p>The code above first checks if the product has more than one variant. The bar chart will only show if there is more than one variant, because there is not much point in making a bar chart if there is only one bar to show. </p>\n<p>Next, the for-loop creates a div with the class &#8220;inventory-bar&#8221; for each variant. The &#8220;inventory-bar&#8221; div has a gray background has a width of 100% (which means that it will be the width of the &#8220;inventory&#8221; div. The div within &#8220;inventory-bar&#8221; is the black &#8216;filler&#8217; bar that will expand its width depending on how much inventory for the variant is available. The filler bar is assigned a width in percentage by the Javascript in Step 3. </p>\n<p>The next function then takes the inventory level of each variant, and assigns the CSS property &#8216;width&#8217; in percentage. The percentage is calculated by dividing the variant&#8217;s inventory level by the total inventory, and then multiplying the result by 100. Using jQuery, the class variant_i (where &#8216;i&#8217; is the index number of the loop) is assigned an inline style with the calculated width. </p>\n<h2 class=\"steps\">3. Insert the Javascript/jQuery code.</h2>\n<p>Below the code from Step 2, insert the following Javascript/jQuery code. </p>\n<pre>\n<code>\n<script type=\"text/javascript\">\njQuery(document).ready(function($){\n  var product_json = {{ product | json }};\n  // get total inventory of product\n  var total_inventory = 0;\n  jQuery.each(product_json.variants, function(i, v) { \n    total_inventory += v.inventory_quantity \n  });\n  // replace inventory bars for variants\n  jQuery.each(product_json.variants, function(i, v){\n    var count = v.inventory_quantity;\n    if (count == 0) {\n      $('.variant_'+i).css({'background':'none'}).html('<span class=\"message\">Sold Out</span>');\n    } else {\n      $('.variant_'+i).css({'width': ((count / total_inventory)*100) + \"%\"});      \n    }\n  });\n});\n</script>\n</code>\n</pre>\n<p>The code above  first creates a JSON object of the product that you are currently viewing, using Liquid&#8217;s &#8220;json&#8221; filter. We want to convert the product into a JSON object because it will allow us to use Javascript for calculations (unfortunately, Liquid alone is not sufficient, as it does not have many math functions). </p>\n<p>Next, it loops through each of the variants of the product, and calculates the total of all variant inventories and stores them in a variable called total_inventory.</p>\n<p>The last function takes the inventory level of each variant, and assigns the CSS property ‘width’ in percentage. The percentage is calculated by dividing the variant’s inventory level by the total inventory, and then multiplying the result by 100. Using jQuery, the class variant_i (where ‘i’ is the index number of the loop) is assigned an inline style with the calculated width. The CSS class variant_i is matched up with the variant_{{forloop.index0}} in the for-loop from the HTML code in Step 2, which ensures that the right width is assigned to the right variant. </p>\n<p>However, if the variant&#8217;s inventory level is 0, the bar for the variant will not be given a width, and instead it will display a message that says &#8220;Sold Out&#8221;. </p>\n<h2 class=\"steps\">4. Insert the CSS code.</h2>\n<p>Inside your CSS file, insert the following selectors for the bar chart.</p>\n<pre>\n<code>\n\n#inventory{\n        /*Give this div a width if you'd like to set the barcharts to a certain width. Otherwise, it will take on the width of its parent div. */\n}\n\n.filler{\n\tbackground:#000;\n}\n\n.inventory-item{\n\tmargin-bottom:15px;\n}\n\n.inventory-bar{\n\tbackground:#e1e1e1;\n\theight:20px;\n\twidth:100%;\n}\n</code>\n</pre>\n<p>The simple CSS above styles the bar chart. By using your own CSS, you can customize the color, margin, width, etc. in any way that you like.</p>\n<p>Here are some examples of the bar charts in action, in different themes:</p>\n<p><img src=\"http://localhost:9999/wp-content/uploads/2009/11/dropify2.png\" alt=\"dropify2\" title=\"dropify2\" width=\"588\" height=\"444\" class=\"alignnone size-full wp-image-891\" srcset=\"http://localhost:9999/wp-content/uploads/2009/11/dropify2.png 588w, http://localhost:9999/wp-content/uploads/2009/11/dropify2-300x227.png 300w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></p>\n<div class=\"sub\">The bar chart in the Dropify theme.</div>\n<p><img src=\"http://localhost:9999/wp-content/uploads/2009/11/minimify.png\" alt=\"minimify\" title=\"minimify\" width=\"588\" height=\"476\" class=\"alignnone size-full wp-image-895\" srcset=\"http://localhost:9999/wp-content/uploads/2009/11/minimify.png 588w, http://localhost:9999/wp-content/uploads/2009/11/minimify-300x243.png 300w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></p>\n<div class=\"sub\">The bar chart in the Minimify theme.</div>\n<h2 class=\"steps\">Conclusion:</h2>\n<p>Originally, I had wanted to use just Liquid to accomplish this, but in the end I had to use a combination of Liquid and Javascript because Liquid cannot do many math functions. With that said I&#8217;m pretty happy that I used Javascript because I learned a great deal about JSON objects. (thanks again <a href=\"http://www.tajimaphotography.com\" title=\"John Tajima Photography\">John</a>!).  I hope you find this technique useful, and I hope to see this in some themes in the future!</p>\n","wordpress_id":652},"allWordpressWpComments":{"edges":[{"node":{"content":"<p>Mate you&#8217;re a star. Many thanks for this</p>\n","author_name":"MKSpdr","date":"October 11th, 2015"}},{"node":{"content":"<p>I have a shopify metafield that holds a variants original inventory level. I want to track each variant independently of each other. If I want to return the starting inventory number of each variant, I use this: {{ original_count }}</p>\n<p>How would I insert this into the javascript to return a percentage for each variant, rather than variant level compared to whole product level?</p>\n","author_name":"Keith","date":"July 13th, 2015"}},{"node":{"content":"<p>can i show this bar in %&#8230;</p>\n<p>Thanks</p>\n","author_name":"Mahender","date":"May 26th, 2015"}},{"node":{"content":"<p>Hi,<br />\nAwesome job, thats what I was searching.<br />\nCould you give a small example of how to implement one bar with all the qantity stock?</p>\n","author_name":"Marcos","date":"February 1st, 2014"}},{"node":{"content":"<p>Sure Marta, shoot me over an email at tetsuro at shopify.com and I can take a look. It&#8217;s just a matter of outputting {{ variant.inventory_quantity }} in its appropriate location 😛</p>\n","author_name":"tetchi","date":"April 24th, 2012"}},{"node":{"content":"<p>Hi Tetsuro, thanks so much for the code.<br />\nBut of course I have a question too 🙂<br />\nDo you by any chance know, what shall I add to this code so my barchart displays also quantity? Below or on top of the barchart?</p>\n","author_name":"Marta","date":"April 24th, 2012"}},{"node":{"content":"<p>Hi Tetsuro, nice work with the code.</p>\n<p>I prefer to use radio buttons to show the variants of my product. How can I move the bar chart for each variant to display next to the radio button for the variant?</p>\n<p>Thanks for your help</p>\n","author_name":"Gordon","date":"February 9th, 2012"}},{"node":{"content":"<p>Actually, in order for this to work, you&#8217;ll need to define the total of each variant for each product, and this could be tricky if it&#8217;s different for all products. Notice that in BonkTown they have text indicating &#8220;Total Qty Offered: x&#8221;. You&#8217;ll have to define what this value is going to be before this can be implemented.</p>\n","author_name":"Tetsuro","date":"April 12th, 2011"}},{"node":{"content":"<p>Ah okay, now I see it. I&#8217;ll see what I can do when I get home tonight from school, but it&#8217;s def. possible!</p>\n","author_name":"Tetsuro","date":"April 11th, 2011"}},{"node":{"content":"<p>Hello Tetsuro,</p>\n<p>It is something simpler than in your example, instead of showing a segmented bar for each product variant, should be a unique bar segment, showing the total of all remaining stock of the product without specify each variant inventory, you can see an example here: <a href=\"http://www.bonktown.com/\" rel=\"nofollow\">http://www.bonktown.com/</a></p>\n<p>You see, although there are several variants to choose sizes and colors, there is only one bar stock (Qty Remaining), just below the &#8220;Time Remaining&#8221;, with the total quantity available product. The bars of each variant are not needed, right below the video it would be like your first example.</p>\n<p>Thanks!</p>\n","author_name":"Victor","date":"April 11th, 2011"}},{"node":{"content":"<p>Hmm, I thought that&#8217;s what I did in my example, I&#8217;m not sure if I get what you mean. Do you have an example of it somewhere that you can perhaps show me?</p>\n<p>Thanks,</p>\n<p>Tetsu</p>\n","author_name":"Tetsuro","date":"April 9th, 2011"}},{"node":{"content":"<p>Nice Work Tetsuro! </p>\n<p>This is something I could use, but what I need it is a little different, I´m looking for how to make just one color bar with all the product inventory on it.</p>\n<p>The idea is to group the total of the inventory of a product (with different colors and sizes) in just one bar of one color.</p>\n<p>I don´t want to show the total of the product variants (color or sizes) with divisions on the bar, I need to show on the bar for the total of &#8220;shirts&#8221;.</p>\n<p>In your example, I would want to show the available stock of the total of 10 shirts. Not how many are available of each size.</p>\n<p>Is there any way to do this?</p>\n<p>Thank you!!</p>\n","author_name":"Victor","date":"April 9th, 2011"}},{"node":{"content":"<p>Sweet, check out my test store <a href=\"http://brakus-llc255.myshopify.com/products/business-focused-full-range-capability\" rel=\"nofollow\">here</a>. I&#8217;ve made one bar chart with divisions in it &#8211; is this what you were looking for? Let me know and I can help implement it to your store as well.</p>\n<p>There are 3 variants here: 2 small, 5 medium, and 3 large. The bar chart gets divided up into different colors proportionately. </p>\n","author_name":"Tetsuro","date":"April 9th, 2011"}},{"node":{"content":"<p>That should be doable very easily by modifying the CSS of the divs. You can float each &#8216;slice&#8217; of the bar to the left so that they only fill up one bar. I&#8217;ll try something out on a test store, and get back to you.</p>\n","author_name":"Tetsuro","date":"April 9th, 2011"}},{"node":{"content":"<p>Hi Tetsuro, thanks for your answer.</p>\n<p>Lets say that for example I have 15 t´shirts on my store, 5 are red, 5 blue and 5 black.</p>\n<p>Right now I have one stock bar for each color product, so in my product page I see 3 bars, one for each product color.</p>\n<p>What I am trying to do is to have just one bar grouping the 3 product variants, so I only have one bar with the total of t-shirts available.</p>\n<p>Thanks!</p>\n","author_name":"Victor","date":"April 8th, 2011"}},{"node":{"content":"<p>Nope > Sorry for the late reply &#8211; been a little busy finishing school 😛 Is the 50 the total inventory for that one product? If so, you can use the &#8216;total_inventory&#8217; variable that I created in the Javascript code above, and output it where you want it.</p>\n<p>Victor >Thanks for the kind words, Victor! Hmm, so you&#8217;re looking to do one bar that has &#8216;slices&#8217; of each variant, correct? Or, could you perhaps show me an example of what you&#8217;re looking for?</p>\n","author_name":"Tetsuro","date":"April 8th, 2011"}},{"node":{"content":"<p>Oh yes!I have a question Tetsuro! I really like your stock bars because it is something that visually looks very good for customers, but I would like to display a single bar showing the total of all the variants that are in stock, because I like visually only bar instead of a bar per variant. Any suggestions to help me? Thank you very much! I love your blog!</p>\n","author_name":"Victor","date":"April 8th, 2011"}},{"node":{"content":"<p>hmm, I&#8217;m trying something similar, but want to show the current inventory level compared to the original (say 5 remaining out of 50) because we are selling limited editions. I haven&#8217;t found support in Shopify for getting the original stock level, any ideas?</p>\n","author_name":"Nope","date":"March 7th, 2011"}},{"node":{"content":"<p>Good shit, thank you sir!</p>\n","author_name":"Ss","date":"January 6th, 2011"}},{"node":{"content":"<p>Thanks Alejandro!</p>\n","author_name":"Tetsuro","date":"May 12th, 2010"}},{"node":{"content":"<p>sweet! I´m new to shopify and very much appreciate your work!</p>\n","author_name":"Alejandro","date":"April 29th, 2010"}},{"node":{"content":"<p>Thank you Falcadia!</p>\n","author_name":"Tetsuro","date":"April 26th, 2010"}},{"node":{"content":"<p>Awesome. Simple and easy. thanks for the tutorial.</p>\n","author_name":"falcadia","date":"January 27th, 2010"}},{"node":{"content":"<p>Thanks Jamie!  🙂</p>\n","author_name":"Tetsuro","date":"December 10th, 2009"}},{"node":{"content":"<p>Nice one Tetsuro!</p>\n","author_name":"Jamie","date":"December 10th, 2009"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"adding-a-barchart-for-inventory-using-jquery-and-json-objects","wordpressId":652,"previousPostSlug":"reading-week","nextPostSlug":"new-design"}}