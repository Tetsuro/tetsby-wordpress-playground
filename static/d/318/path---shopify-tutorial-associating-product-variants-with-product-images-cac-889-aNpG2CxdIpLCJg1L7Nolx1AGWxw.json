{"data":{"wordpressPost":{"title":"Shopify Tutorial: Associating Product Variants with Product Images","content":"<div style=\"color:red;\">\n<p>UPDATE 11/10/2012: There is now an official, non-hacky solution for associating variants and product images! Check out the <a href=\"http://apps.shopify.com/variant-images\">Variant Images</a> app by the awesome Blake Mesdag and Mark Dunkley ðŸ™‚</p>\n</div>\n<p>In this tutorial I&#8217;ll be showing you how to associate product variants with product images using jQuery and Shopify&#8217;s new feature for adding unique alt tags for product images. For demonstration purposes I&#8217;m going to be modifying one of Shopify&#8217;s free themes, Radiance, but this technique will work with any theme. You can check out demos of this in action <a href=\"http://schaefer-dickinson681.myshopify.com/products/various-coloured-tees\" target=\"_blank\">here</a> (single option) and <a href=\"http://schaefer-dickinson681.myshopify.com/products/various-coloured-tees-multiple-options\">here</a> (multiple options).</p>\n<p>The screenshot below shows what the Radiance&#8217;s theme looks like initially. The first thing we&#8217;re going to do is set up the product&#8217;s variants and alt tags. After that, we hide the #thumbs &lt;ul&gt;. Finally, we&#8217;re going to add some Javascript to make it so that the options dropdown in the top-right corner changes the image inside the #active-wrapper div with the appropriate product image. For example, if you select &#8220;Black&#8221; for colour, #active-wrapper will show the product image with the black shirt. </p>\n<p><a href=\"http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance.jpg\"><img src=\"http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance.jpg\" alt=\"\" title=\"divs in radiance\" width=\"748\" height=\"479\" class=\"alignnone size-full wp-image-2119\" srcset=\"http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance.jpg 748w, http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance-300x192.jpg 300w\" sizes=\"(max-width: 748px) 100vw, 748px\" /></a></p>\n<div class=\"sub\">Radiance theme&#8217;s  default product page.</div>\n<p>Sounds easy, right? Let&#8217;s get started!</p>\n<p><!--more--></p>\n<h2 class='step'>1. Set up your product variants and product image alt tags.</h2>\n<p>The first thing you must do is match up your product&#8217;s variants with your product image&#8217;s alt tags. In order for this to work, the product&#8217;s variants must be <strong>exactly the same</strong> as the product image&#8217;s alt tags. The screenshot below shows you an example of a proper setup. </p>\n<p>It&#8217;s important to note that you can only make a product association with one option. You can certainly have up to three options for your product (for example, I added a &#8220;Size&#8221; option <a href=\"http://schaefer-dickinson681.myshopify.com/products/various-coloured-tees-multiple-options\">here</a>), but only one will affect what product image is shown. In step 3, you&#8217;ll see how to choose which option is tied to the product images. </p>\n<p><a href=\"http://localhost:8888/wp-content/uploads/2012/01/variants_and_product_image_alt_tags1.png\"><img src=\"http://localhost:8888/wp-content/uploads/2012/01/variants_and_product_image_alt_tags1.png\" alt=\"variants and product image alt tags\" title=\"variants and product image alt tags\" width=\"812\" height=\"727\" class=\"alignnone size-full wp-image-2080\" srcset=\"http://localhost:8888/wp-content/uploads/2012/01/variants_and_product_image_alt_tags1.png 812w, http://localhost:8888/wp-content/uploads/2012/01/variants_and_product_image_alt_tags1-300x269.png 300w, http://localhost:8888/wp-content/uploads/2012/01/variants_and_product_image_alt_tags1-768x688.png 768w\" sizes=\"(max-width: 812px) 100vw, 812px\" /></a></p>\n<div class=\"sub\">An example of a proper variants and alt tag setup.</div>\n<h2 class='step'>2. Hide the thumbnails (optional)</h2>\n<p>The next step is to hide the thumbnails with CSS. This step is optional, but to me it makes sense to hide them because the variant-selecting dropdown should be the only thing that controls what&#8217;s shown as the main image. </p>\n<p>To do this in the Radiance theme, I simply added the existing &#8220;hidden&#8221; class to the &lt;ul&gt; that contains all of the thumbnails, as shown below. It&#8217;s important to still output the images (although they won&#8217;t be visible) because 1) we can pre-load the images and 2) we need to grab the &#8216;src&#8217; attribute of the images when we swap the main image inside #active-wrapper. </p>\n<p>I&#8217;m also going to change the product_img_url value inside the &lt;img&rt; tag from &#8216;thumb&#8217; to original, so that we load the biggest possible product image inside #active-wrapper. In reality you can strip out a lot more of the code below, but for the purpose of this tutorial I&#8217;m just going to keep it as is. </p>\n<pre>\n<code markup=\"span\">\n<ul id=\"thumbs\" <span style=\"color:blue;\">class=\"hidden\"</span>>\n  {% for image in product.images %}\n     <li class=\"{% if forloop.first %} first{% endif %}{% if forloop.last %} last{% endif %}\">\n       <a class=\"gallery\" rel=\"product-gallery\" href=\"{{ image | product_img_url: 'original' }}\">\n          <img src=\"{{ image | product_img_url: '<span style=\"color:blue;\">original</span>' }}\" alt=\"{{ image.alt | escape }}\" />\n       </a>\n     </li>\n  {% endfor %}\n</ul>\n</code>\n</pre>\n<p>Your product page should now look like this: </p>\n<p><a href=\"http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance-after.jpg\"><img src=\"http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance-after.jpg\" alt=\"\" title=\"divs in radiance-after\" width=\"760\" height=\"406\" class=\"alignnone size-full wp-image-2120\" srcset=\"http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance-after.jpg 760w, http://localhost:8888/wp-content/uploads/2012/01/divs-in-radiance-after-300x160.jpg 300w\" sizes=\"(max-width: 760px) 100vw, 760px\" /></a></p>\n<div class=\"sub\">No thumbnails!</div>\n<h2 class='step'>2. Look for the selectCallback function</h2>\n<p>If you&#8217;re using a theme from the Shopify Theme Store, the chances are high that it is using the <a href=\"http://wiki.shopify.com/Tutorial_on_editing_existing_theme_to_use_products_with_multiple_options\">OptionSelector javascript</a>. This means that the theme contains a function called selectCallback.</p>\n<p>The selectCallback function is called whenever a user selects a different option through the options dropdown menu, and it&#8217;s used to update the variant&#8217;s price and Compare At price. Since the image-swapping needs to happen when the user selects a different option, why not place our JS in selectCallback? ðŸ˜€</p>\n<p>What you can do is place the code in the Step 3 inside the selectCallback function, which is usually located in &#8220;product.liquid&#8221; or &#8220;theme.liquid&#8221;. In Radiance, it is located at the bottom of &#8220;theme.liquid&#8221;. </p>\n<p><strong>What if your theme does not use OptionSelector?</strong> Worry not, there are other solutions. Your theme may be using a dropdown menu or radio buttons for single-option products. In that case, you can use jQuery&#8217;s <a href=\"http://api.jquery.com/change/\">change()</a> method instead to trigger the Javascript code in Step 3.</p>\n<h2 class='step'>3. Add some code to selectCallback</h2>\n<p>Paste the code marked in blue. The first bit of Liquid goes outside of the selectCallback function. Everything below &#8220;//Swapping images JS&#8221; goes inside the selectCallback function.</p>\n<pre>\n<code>\n<span style=\"color:blue;\">\n{% assign option_to_match = '<span style=\"color:red;\">Your Option Name Here</span>' %}\n{% assign option_index = 0 %}\n{% for option in product.options %}\n  {% if option == option_to_match %}\n    {% assign option_index = forloop.index0 %}\n  {% endif %}\n{% endfor %}\n</span>\n\n <script>\n    var selectCallback = function(variant, selector) {\n    <span style=\"color:blue;\">\n     //Swapping images JS\n    var optionValue = variant.options[{{ option_index }}];\n    var imageSrc = $(\"#thumbs img[alt='\"+optionValue+\"']\").attr('src');\n    if (imageSrc != 'undefined') {\n      //Change '_thumb' with the image size that you are using for the thumbnails\n      imageSrc = imageSrc.replace('_thumb','');\n      $('#active-wrapper img').attr('src', imageSrc);\n    }    \n    </span>\n...rest of selectCallback code\n</code>\n</pre>\n<p>If your code does not use selectCallback, what you could do is use jQuery's change() method to check for when the option for the dropdown is changed. The code would look something like the code below, where '#selector' (marked in blue) is the id of the select dropdown or radio buttons.</p>\n<pre>\n<code markup=\"span\"> \n{% assign option_to_match = '<span style=\"color:red;\">Your Option Name Here</span>' %}\n{% assign option_index = 0 %}\n{% for option in product.options %}\n  {% if option == option_to_match %}\n    {% assign option_index = forloop.index0 %}\n  {% endif %}\n{% endfor %}\n<script>\n\n//Swapping images JS\n$('<span style=\"color:blue;\">#selector</span>').change(function() {\n    var optionValue = variant.options[{{ option_index }}];\n    var imageSrc = $(\"#thumbs img[alt='\"+optionValue+\"']\").attr('src');\n    if (imageSrc != 'undefined') {\n      //Change '_thumb' with the image size that you are using for the thumbnails\n      imageSrc = imageSrc.replace('_thumb','');\n      $('#active-wrapper img').attr('src', imageSrc);\n    }    \n});\n</script>\n</code>\n</pre>\n<p>First, what we need to do is set what option we want to associate with product images. This is done by changing the value of the 'option_to_match' variable, marked in red in the above code snippets. In this tutorial's example, options_to_match would be \"Color\", because that's the name of the option for our variants. The Liquid code does a forloop to save the index number of the chosen option which is then used in the following Javascript snippet. Big thanks to <a href=\"http://11heavens.com/\" title=\"11 Heavens\" target=\"_blank\">Caro</a> for this Liquid snippet, as without it this technique would only work for single-option products.</p>\n<p>What the Javascript code does is it saves the variant title of the selected variant in the dropdown inside a variable, and then looks for the product image inside #thumbs that has the same alt tag as the value of the variable. Once it finds the matching product image, it takes the value of the src attribute of the matching image and places it inside the src value of the image that's currently inside #active-wrapper.</p>\n<h2 class='step'>Conclusion</h2>\n<p>That's all there is to it! If you're having trouble, make sure that you have set up the product alt tags and variant titles correctly, as outlined in Step 1. Please leave a comment if you have any questions or feedback!</p>\n<p><strong>UPDATE:</strong> I received some feedback from my peers, and it really makes no sense to limit this to one option. For example, for shirts it makes sense to have the colour and another option for size. I will be updating this article tonight to address this.</p>\n<p><strong>UPDATE 2:</strong> The code now supports multiple options thanks to the help of the incredible <a href=\"http://11heavens.com/\" title=\"11 Heavens\" target=\"_blank\">Caroline Schnapp</a>!</p>\n<p><strong>UPDATE 3:</strong>Made some big fixes - sorry for the confusion guys. Also fixed a silly variable naming mistake. Thanks Czarto for catching that!</p>\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fe56f561-facd-5f7e-9fbe-350d6f1cd69e"}}